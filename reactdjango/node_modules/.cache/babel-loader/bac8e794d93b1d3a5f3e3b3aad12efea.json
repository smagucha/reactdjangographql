{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\reactwithdjango\\\\reactwithdjango\\\\reactdjango\\\\src\\\\components\\\\Home.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery, gql } from \"@apollo/client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QUERY_MOVIES = gql`\n  query{\n\tallMovie{\n\t  id\n\t  name\n\t  description\n\t}\n}\n`;\n\nfunction Home() {\n  _s();\n\n  const {\n    data,\n    loading\n  } = useQuery(QUERY_MOVIES, {\n    pollInterval: 500 // refetch the result every 0.5 second\n\n  });\n  console.log(data); // should handle loading status\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 23\n  }, this);\n  return data.movies.map(_ref => {\n    let {\n      id,\n      name,\n      description\n    } = _ref;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Movie - \", id, \": \", name, \" \", description, \"console.log(name, description)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 7\n      }, this)\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }, this);\n  });\n}\n\n_s(Home, \"uHu6+Av6iz/Cemw652GCrFuaHvo=\", false, function () {\n  return [useQuery];\n});\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/reactwithdjango/reactwithdjango/reactdjango/src/components/Home.js"],"names":["React","useQuery","gql","QUERY_MOVIES","Home","data","loading","pollInterval","console","log","movies","map","id","name","description"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,gBAA5B;;AACA,MAAMC,YAAY,GAAGD,GAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;;AASA,SAASE,IAAT,GAAgB;AAAA;;AACd,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBL,QAAQ,CAChCE,YADgC,EAClB;AACZI,IAAAA,YAAY,EAAE,GADF,CACM;;AADN,GADkB,CAAlC;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ,EANc,CAOd;;AACA,MAAIC,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEb,SAAQD,IAAI,CAACK,MAAL,CAAYC,GAAZ,CAAgB;AAAA,QAAC;AAAEC,MAAAA,EAAF;AAAMC,MAAAA,IAAN;AAAYC,MAAAA;AAAZ,KAAD;AAAA,wBACtB;AAAA,6BACE;AAAA,+BACWF,EADX,QACiBC,IADjB,OACwBC,WADxB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,OAAUF,EAAV;AAAA;AAAA;AAAA;AAAA,YADsB;AAAA,GAAhB,CAAR;AASD;;GAnBQR,I;UACmBH,Q;;;KADnBG,I;AAqBT,eAAeA,IAAf","sourcesContent":["import React from 'react';\r\nimport {useQuery, gql} from \"@apollo/client\";\r\nconst QUERY_MOVIES = gql`\r\n  query{\r\n\tallMovie{\r\n\t  id\r\n\t  name\r\n\t  description\r\n\t}\r\n}\r\n`;\r\nfunction Home() {\r\n  const { data, loading } = useQuery(\r\n    QUERY_MOVIES, {\r\n      pollInterval: 500 // refetch the result every 0.5 second\r\n    }\r\n  );\r\n  console.log(data)\r\n  // should handle loading status\r\n  if (loading) return <p>Loading...</p>;\r\n   \r\n  return( data.movies.map(({ id, name, description }) => (\r\n    <div key={id}>\r\n      <p>\r\n        Movie - {id}: {name} {description}\r\n        console.log(name, description)\r\n      </p>\r\n    </div>\r\n  ))\r\n  );\r\n}\r\n\r\nexport default Home\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}