{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\reactwithdjango\\\\reactwithdjango\\\\reactdjango\\\\src\\\\components\\\\UpdateMovie.js\",\n    _s = $RefreshSig$();\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React from 'react';\n// import { useState } from \"react\";\n// import './static/css/form.css'\n// import {useQuery, gql, useMutation} from \"@apollo/client\";\n// import { useParams} from \"react-router\"\n// function UpdateMovie() {\n//   const { id } = useParams();\n//   const QUERY_MOVIES = gql`\n//     query{\n//       movieById(id:${id}){\n//         id,\n//         name,\n//         description\n//       }\n//       }\n//        `;\n//     const UPDATE_MOVIE = gql`\n//       mutation updatemovie($id:Int, $name: String, $description: Stirng){\n//         UpdateMovie(id:$id, name:$name, description:$description){\n//           movie{\n//             id\n//             name\n//             description          \n//           }\n//         }\n//       }\n//     `;\n//   const {data, error} =useQuery(QUERY_MOVIES,{ variables: { id } })\n//   const [name, setName] = useState(\"\");\n//   const [description, setDescription] = useState(\"\");\n//   const [updateMOVIE] = useMutation(UPDATE_MOVIE);\n//   function handleUpdateMovie(event) {\n//     event.preventDefault();\n//     updateMOVIE({ variables: { id, name, description } });\n//     console.log({UPDATE_MOVIE})\n//   }\n//     return (\n//     <div>\n//       <form onSubmit={handleUpdateMovie}>\n//         <input type=\"text\"  defaultValue={data.movieById.name} onChange={(event) => setName(event.target.value)} />\n//         <input type=\"text\" defaultValue={data.movieById.description} onChange={(event) => setDescription(event.target.value)} />\n//         <button  type=\"submit\">\n//           Submit\n//         </button>\n//         {error && <p>{error.message}</p>}\n//       </form>\n//     </div>\n//   );\n// }\n// export default UpdateMovie\nconst UPDATE_TODO = gql`\n  mutation UpdateTodo($id: int!, $name: String!, description:$string) {\n    updateTodo(id: $id, name: $name, description:$description) {\n     movie{\n      id\n      name\n      description\n     }\n    }\n  }\n`;\n\nfunction Todos() {\n  _s();\n\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(GET_TODOS);\n  const [updateTodo] = useMutation(UPDATE_TODO);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 21\n  }, this);\n  return data.todos.map(_ref => {\n    let {\n      id,\n      type\n    } = _ref;\n    let input;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: type\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          updateTodo({\n            variables: {\n              id,\n              type: input.value\n            }\n          });\n          input.value = '';\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: node => {\n            input = node;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Update Todo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this);\n  });\n}\n\n_s(Todos, \"fbkovNNnWB9e30Lni1bb3ZubTHA=\", true);\n\n_c = Todos;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todos\");","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/reactwithdjango/reactwithdjango/reactdjango/src/components/UpdateMovie.js"],"names":["UPDATE_TODO","gql","Todos","loading","error","data","useQuery","GET_TODOS","updateTodo","useMutation","todos","map","id","type","input","e","preventDefault","variables","value","node"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA,MAAMA,WAAW,GAAGC,GAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYA,SAASC,KAAT,GAAiB;AAAA;;AACf,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BC,QAAQ,CAACC,SAAD,CAAzC;AACA,QAAM,CAACC,UAAD,IAAeC,WAAW,CAACT,WAAD,CAAhC;AAEA,MAAIG,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,SAAOC,IAAI,CAACK,KAAL,CAAWC,GAAX,CAAe,QAAkB;AAAA,QAAjB;AAAEC,MAAAA,EAAF;AAAMC,MAAAA;AAAN,KAAiB;AACtC,QAAIC,KAAJ;AAEA,wBACE;AAAA,8BACE;AAAA,kBAAID;AAAJ;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,QAAQ,EAAEE,CAAC,IAAI;AACbA,UAAAA,CAAC,CAACC,cAAF;AACAR,UAAAA,UAAU,CAAC;AAAES,YAAAA,SAAS,EAAE;AAAEL,cAAAA,EAAF;AAAMC,cAAAA,IAAI,EAAEC,KAAK,CAACI;AAAlB;AAAb,WAAD,CAAV;AAEAJ,UAAAA,KAAK,CAACI,KAAN,GAAc,EAAd;AACD,SANH;AAAA,gCAQE;AACE,UAAA,GAAG,EAAEC,IAAI,IAAI;AACXL,YAAAA,KAAK,GAAGK,IAAR;AACD;AAHH;AAAA;AAAA;AAAA;AAAA,gBARF,eAaE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAbF;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAUP,EAAV;AAAA;AAAA;AAAA;AAAA,YADF;AAoBD,GAvBM,CAAP;AAwBD;;GA/BQV,K;;KAAAA,K","sourcesContent":["// import React from 'react';\r\n// import { useState } from \"react\";\r\n// import './static/css/form.css'\r\n// import {useQuery, gql, useMutation} from \"@apollo/client\";\r\n// import { useParams} from \"react-router\"\r\n// function UpdateMovie() {\r\n//   const { id } = useParams();\r\n//   const QUERY_MOVIES = gql`\r\n//     query{\r\n//       movieById(id:${id}){\r\n//         id,\r\n//         name,\r\n//         description\r\n//       }\r\n//       }\r\n//        `;\r\n//     const UPDATE_MOVIE = gql`\r\n//       mutation updatemovie($id:Int, $name: String, $description: Stirng){\r\n//         UpdateMovie(id:$id, name:$name, description:$description){\r\n//           movie{\r\n//             id\r\n//             name\r\n//             description          \r\n//           }\r\n//         }\r\n//       }\r\n//     `;\r\n\r\n//   const {data, error} =useQuery(QUERY_MOVIES,{ variables: { id } })\r\n//   const [name, setName] = useState(\"\");\r\n//   const [description, setDescription] = useState(\"\");\r\n//   const [updateMOVIE] = useMutation(UPDATE_MOVIE);\r\n  \r\n//   function handleUpdateMovie(event) {\r\n//     event.preventDefault();\r\n//     updateMOVIE({ variables: { id, name, description } });\r\n//     console.log({UPDATE_MOVIE})\r\n//   }\r\n\r\n//     return (\r\n//     <div>\r\n//       <form onSubmit={handleUpdateMovie}>\r\n//         <input type=\"text\"  defaultValue={data.movieById.name} onChange={(event) => setName(event.target.value)} />\r\n//         <input type=\"text\" defaultValue={data.movieById.description} onChange={(event) => setDescription(event.target.value)} />\r\n//         <button  type=\"submit\">\r\n//           Submit\r\n//         </button>\r\n//         {error && <p>{error.message}</p>}\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default UpdateMovie\r\n\r\n\r\n\r\nconst UPDATE_TODO = gql`\r\n  mutation UpdateTodo($id: int!, $name: String!, description:$string) {\r\n    updateTodo(id: $id, name: $name, description:$description) {\r\n     movie{\r\n      id\r\n      name\r\n      description\r\n     }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction Todos() {\r\n  const { loading, error, data } = useQuery(GET_TODOS);\r\n  const [updateTodo] = useMutation(UPDATE_TODO);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n\r\n  return data.todos.map(({ id, type }) => {\r\n    let input;\r\n\r\n    return (\r\n      <div key={id}>\r\n        <p>{type}</p>\r\n        <form\r\n          onSubmit={e => {\r\n            e.preventDefault();\r\n            updateTodo({ variables: { id, type: input.value } });\r\n\r\n            input.value = '';\r\n          }}\r\n        >\r\n          <input\r\n            ref={node => {\r\n              input = node;\r\n            }}\r\n          />\r\n          <button type=\"submit\">Update Todo</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  });\r\n}"]},"metadata":{},"sourceType":"module"}