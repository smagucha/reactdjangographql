{"ast":null,"code":"import { maybe } from \"./maybe.js\";\nexport default maybe(function () {\n  return globalThis;\n}) || maybe(function () {\n  return window;\n}) || maybe(function () {\n  return self;\n}) || maybe(function () {\n  return global;\n}) || maybe(function () {\n  return maybe.constructor(\"return this\")();\n});","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,QAAsB,YAAtB;AAMA,eACEA,KAAK,CAAC;AAAM;AAAU,CAAjB,CAAL,IACAA,KAAK,CAAC;AAAM;AAAM,CAAb,CADL,IAEAA,KAAK,CAAC;AAAM;AAAI,CAAX,CAFL,IAGAA,KAAK,CAAC;AAAM;AAAM,CAAb,CAHL,IAUAA,KAAK,CAAC;AAAa,SAAOA,KAAK,CAACC,WAAN,CAAkB,aAAlB,GAAP;AAA2C,CAAzD,CAXP","names":["maybe","constructor"],"sources":["."],"sourcesContent":["import { maybe } from \"./maybe\";\n\ndeclare global {\n  const __DEV__: boolean | undefined;\n}\n\nexport default (\n  maybe(() => globalThis) ||\n  maybe(() => window) ||\n  maybe(() => self) ||\n  maybe(() => global) ||\n  // We don't expect the Function constructor ever to be invoked at runtime, as\n  // long as at least one of globalThis, window, self, or global is defined, so\n  // we are under no obligation to make it easy for static analysis tools to\n  // detect syntactic usage of the Function constructor. If you think you can\n  // improve your static analysis to detect this obfuscation, think again. This\n  // is an arms race you cannot win, at least not in JavaScript.\n  maybe(function() { return maybe.constructor(\"return this\")() })\n) as typeof globalThis & {\n  __DEV__: typeof __DEV__;\n};\n"]},"metadata":{},"sourceType":"module"}