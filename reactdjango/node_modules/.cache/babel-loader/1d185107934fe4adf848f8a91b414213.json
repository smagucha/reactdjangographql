{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\reactwithdjango\\\\reactwithdjango\\\\reactdjango\\\\src\\\\components\\\\DeleteMovie.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useQuery, useMutation, gql } from '@apollo/client';\nimport { useParams } from \"react-router\";\nimport { Mutation } from \"react-apollo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction DeleteMovie() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const QUERY_MOVIES = gql`\n\t  query{\n\t\tallMovie{\n\t\t  id\n\t\t  name\n\t\t  description\n\t\t}\n\t}\n\t`;\n  const DELETE_MOVIE = gql`\n\t  mutation deleteTodo(\n\t    $id: ID!\n\t  ) {\n\t    deleteMovie(\n\t      id: $id\n\t    ) {\n\t      id\n\t    }\n\t  }\n\t`;\n  return /*#__PURE__*/_jsxDEV(Mutation, {\n    mutation: DELETE_MOVIE,\n    update: (cache, _ref) => {\n      let {\n        data: {\n          deleteMovie\n        }\n      } = _ref;\n      const {\n        allmovies\n      } = cache.readQuery({\n        query: QUERY_MOVIES\n      });\n      cache.writeQuery({\n        query: QUERY_MOVIES,\n        data: {\n          allmovies: allmovies.filter(e => e.id !== id)\n        }\n      });\n    },\n    children: (deletemovie, _ref2) => {\n      let {\n        data\n      } = _ref2;\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => {\n          deletemovie({\n            variables: {\n              id\n            }\n          });\n        },\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DeleteMovie, \"yQgCIz/jJfqV1l9s2yoba81MT5A=\", false, function () {\n  return [useParams];\n});\n\n_c = DeleteMovie;\n;\nexport default DeleteMovie;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteMovie\");","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/reactwithdjango/reactwithdjango/reactdjango/src/components/DeleteMovie.js"],"names":["React","useQuery","useMutation","gql","useParams","Mutation","DeleteMovie","id","QUERY_MOVIES","DELETE_MOVIE","cache","data","deleteMovie","allmovies","readQuery","query","writeQuery","filter","e","deletemovie","variables"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAkBC,WAAlB,EAA+BC,GAA/B,QAA0C,gBAA1C;AACA,SAASC,SAAT,QAAyB,cAAzB;AACA,SAASC,QAAT,QAAyB,cAAzB;;;AAEA,SAASC,WAAT,GAAwB;AAAA;;AACvB,QAAM;AAAEC,IAAAA;AAAF,MAASH,SAAS,EAAxB;AACA,QAAMI,YAAY,GAAGL,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EARC;AAUA,QAAMM,YAAY,GAAGN,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAVC;AAWC,sBACE,QAAC,QAAD;AACE,IAAA,QAAQ,EAAEM,YADZ;AAEE,IAAA,MAAM,EAAE,CAACC,KAAD,WAAsC;AAAA,UAA9B;AAAEC,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AAAR,OAA8B;AAC5C,YAAM;AAAEC,QAAAA;AAAF,UAAgBH,KAAK,CAACI,SAAN,CAAgB;AAAEC,QAAAA,KAAK,EAAEP;AAAT,OAAhB,CAAtB;AACAE,MAAAA,KAAK,CAACM,UAAN,CAAiB;AACfD,QAAAA,KAAK,EAACP,YADS;AAEfG,QAAAA,IAAI,EAAE;AAAEE,UAAAA,SAAS,EAAEA,SAAS,CAACI,MAAV,CAAiBC,CAAC,IAAIA,CAAC,CAACX,EAAF,KAASA,EAA/B;AAAb;AAFS,OAAjB;AAID,KARH;AAAA,cAUG,CAACY,WAAD;AAAA,UAAc;AAAER,QAAAA;AAAF,OAAd;AAAA,0BACC;AACE,QAAA,OAAO,EAAEO,CAAC,IAAI;AACZC,UAAAA,WAAW,CAAC;AACVC,YAAAA,SAAS,EAAE;AACTb,cAAAA;AADS;AADD,WAAD,CAAX;AAKD,SAPH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD;AAAA;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GA/CQD,W;UACOF,S;;;KADPE,W;AA+CR;AAED,eAAeA,WAAf","sourcesContent":["import React from 'react'\r\nimport {useQuery, useMutation, gql } from '@apollo/client'\r\nimport { useParams} from \"react-router\"\r\nimport { Mutation } from \"react-apollo\";\r\n\r\nfunction DeleteMovie () {\r\n\tconst { id } = useParams();\r\n\tconst QUERY_MOVIES = gql`\r\n\t  query{\r\n\t\tallMovie{\r\n\t\t  id\r\n\t\t  name\r\n\t\t  description\r\n\t\t}\r\n\t}\r\n\t`;\r\n\t\r\n\tconst DELETE_MOVIE = gql`\r\n\t  mutation deleteTodo(\r\n\t    $id: ID!\r\n\t  ) {\r\n\t    deleteMovie(\r\n\t      id: $id\r\n\t    ) {\r\n\t      id\r\n\t    }\r\n\t  }\r\n\t`;\r\n  return (\r\n    <Mutation\r\n      mutation={DELETE_MOVIE}\r\n      update={(cache, { data: { deleteMovie } }) => {\r\n        const { allmovies } = cache.readQuery({ query: QUERY_MOVIES });\r\n        cache.writeQuery({\r\n          query:QUERY_MOVIES,\r\n          data: { allmovies: allmovies.filter(e => e.id !== id)}\r\n        });\r\n      }}\r\n      >\r\n      {(deletemovie, { data }) => (\r\n        <button\r\n          onClick={e => {\r\n            deletemovie({\r\n              variables: {\r\n                id\r\n              }\r\n            });\r\n          }}\r\n        >Delete</button>            \r\n      )}\r\n    </Mutation>\r\n  );\r\n};\r\n\r\nexport default DeleteMovie;"]},"metadata":{},"sourceType":"module"}